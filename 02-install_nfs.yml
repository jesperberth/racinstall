---
- hosts: oraclerac

  vars:
    # created with:
    # python -c 'import crypt; print crypt.crypt("password_goes_here", "$1$SomeSalt$")'
    user_password: $1$SomeSalt$I7oNWJ.MZAgIP4Aqj3RfO1
    ora_dbname: testdatabase
    ora_sid_node1: testsid1
    ora_sid_node2: testsid2
    ora_password: Cflex123
    rac_clustername: rac-cluster
    rac_scanname: rac-scan
    rac_node1fqdn: rac-node01.redhat.local
    rac_node2fqdn: rac-node02.redhat.local
    rac_node1vip: rac-vip01.redhat.local
    rac_node2vip: rac-vip02.redhat.local
    rac_server1: rac-node01
    rac_server2: rac-node02
    nfsserver: storagenfs.redhat.local
 
  tasks:
    # Install Software

    - name: yum update
      yum:
       name:  "*"
       state: latest

    - name: ensure oracle-rdbms-preinstall is installed
      yum:
       name:  oracle-rdbms-server-12cR1-preinstall
       state: latest
    
    - name: ensure networkmanager-glib is installed
      yum:
       name:  NetworkManager-glib
       state: latest

    - name: ensure net-tools is installed
      yum:
       name:  net-tools
       state: latest

    - name: install package groups
      yum:
        name: 
          - "@Development tools"
          - "@Hardware Monitoring Utilities"
          - "@Large Systems Performance"
          - "@Network file system client"
          - "@Performance Tools"
          - "@Compatibility Libraries"
          - "@Server with GUI"
        state: present

    - name: copy cvuqdisk.rpm
      copy:
        src:  /root/install/software/cvuqdisk-1.0.10-1.rpm
        dest:  /root/install/software/cvuqdisk-1.0.10-1.rpm
        force: no

    - name: Install cvuqdisk-1.0.10-1.rpm
      yum:
        name: /root/install/software/cvuqdisk-1.0.10-1.rpm
        state: present

    # Set Security

    - name: change SELINUX
      selinux:
       policy: targeted
       state: permissive
    
    - name: set oracle user password
      user: name=oracle password={{ user_password }}

    # Set Environment Parameters

    - name: Set Nproc
      lineinfile:
        path: /etc/security/limits.d/20-nproc.conf
        regexp: '[*]\s*\b(soft)\b\s*\b(nproc)\b\s*\b(4096)\b'
        line: '* - nproc 16384'
    

    # Configure network

    - name: Set Ip address on nic2 on rac node 1
      nmcli:
        conn_name: rac-eth1
        ifname: eth1
        type: ethernet
        ip4: 192.168.50.1/24
        state: present
      when: ansible_hostname == rac_server1 

    - name: Set Ip address on nic2 on rac node 2
      nmcli:
        conn_name: rac-eth1
        ifname: eth1
        type: ethernet
        ip4: 192.168.50.2/24
        state: present
      when: ansible_hostname == rac_server2

    - name: add host to /etc/hosts
      lineinfile:
       path: /etc/hosts
       line: '{{ ansible_default_ipv4.address }} {{ ansible_fqdn }} {{ ansible_hostname }}'
       create: yes
   
    # Configure services

    - name: Disable Firewalld
      systemd:
        name: firewalld
        enabled: no
        state: stopped

    - name: Disable avahi-daemon
      systemd:
        name: avahi-daemon
        enabled: no
        state: stopped

    # Configure firewall
    
#    - name: set firewall rules Oracle DB
#      firewalld:
#       zone: public
#       port: 1521/tcp
#       permanent: true
#       state: enabled
#    
#   - name: set firewall rules 5222
#      firewalld:
#       zone: public
#       port: 5222/tcp
#       permanent: true
#       state: enabled
#    
#    - name: set firewall rules 5269
#      firewalld:
#       zone: public
#       port: 5269/tcp
#       permanent: true
#       state: enabled

     # Configure Oracle Prereq directories

    - name: creates directory for oracle install
      file:
       path: /u01/app/oracle/product/12.2.0.1/db_1
       state: directory
  
    - name: creates directory for oracle grid
      file:
       path: /u01/app/12.2.0.1/grid
       state: directory

    - name: creates directory for oracle oradata
      file:
       path: /u01/oradata
       state: directory

    - name: creates directory for oracle shared_config
      file:
       path: /u01/shared_config
       state: directory

    # fstab entry

    - name: add fstab entry shared_config
      mount: 
       name: /u01/shared_config 
       src: "{{ nfsserver }}:/nfsdisk/shared_config"
       fstype: nfs
       opts: rw,bg,hard,nointr,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0
       state: present

    - name: add fstab entry shared_grid
      mount: 
       name: /u01/app/12.2.0.1/grid
       src: "{{ nfsserver }}:/nfsdisk/shared_grid"
       fstype: nfs
       opts: rw,bg,hard,nointr,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0
       state: present

    - name: add fstab entry shared_home
      mount: 
       name: /u01/app/oracle/product/12.2.0.1/db_1
       src: "{{ nfsserver }}:/nfsdisk/shared_home"
       fstype: nfs
       opts: rw,bg,hard,nointr,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0
       state: present

    - name: add fstab entry shared_data
      mount: 
       name: /u01/oradata
       src: "{{ nfsserver }}:/nfsdisk/shared_data"
       fstype: nfs
       opts: rw,bg,hard,nointr,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0
       state: present

    - name: mount disks
      shell: mount -a
      args:
       warn: false

    # Create Oracle Users home dir
    
    - name: creates directory for oracle users scripts
      file:
       path: /home/oracle/scripts
       state: directory

    - name: creates directory for software install
      file:
       path: /root/install/software
       state: directory

#    - name: create setENV.sh file in oracle users scripts
#      template:
#       src: templates/setEnv_node1.j2
#       dest: /home/oracle/scripts/setEnv.sh
#       mode: 0744
#      when: ansible_hostname == rac_server1 

#    - name: create setENV.sh file in oracle users scripts
#      template:
#       src: templates/setEnv_node2.j2
#       dest: /home/oracle/scripts/setEnv.sh
#       mode: 0744
#      when: ansible_hostname == rac_server2 
    - name: add to bash_profile node1
      blockinfile:
        path: /home/oracle/.bash_profile
        block: |
          export TMP=/tmp
          export TMPDIR=$TMP
          export ORACLE_HOSTNAME={{ ansible_fqdn }}
          export ORACLE_UNQNAME={{ ora_dbname }}
          export ORACLE_BASE=/u01/app/oracle
          export GRID_HOME=/u01/app/12.2.0.1/grid
          export DB_HOME=$ORACLE_BASE/product/12.2.0.1/db_1
          export ORACLE_HOME=$DB_HOME
          export ORACLE_SID={{ ora_sid_node1 }}
          export ORACLE_TERM=xterm
          export BASE_PATH=/usr/sbin:/usr/local/bin:$PATH
          export PATH=$ORACLE_HOME/bin:$BASE_PATH
          export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib
          export CLASSPATH=$ORACLE_HOME/JRE:$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlib
          alias grid_env='. /home/oracle/grid_env'
          alias db_env='. /home/oracle/db_env'
      when: ansible_hostname == rac_server1

    - name: add to bash_profile node1
      blockinfile:
        path: /home/oracle/.bash_profile
        block: |
         export TMP=/tmp
         export TMPDIR=$TMP
         export ORACLE_HOSTNAME={{ ansible_fqdn }}
         export ORACLE_UNQNAME={{ ora_dbname }}
         export ORACLE_BASE=/u01/app/oracle
         export GRID_HOME=/u01/app/12.2.0.1/grid
         export DB_HOME=$ORACLE_BASE/product/12.2.0.1/db_1
         export ORACLE_HOME=$DB_HOME
         export ORACLE_SID={{ ora_sid_node2 }}
         export ORACLE_TERM=xterm
         export BASE_PATH=/usr/sbin:/usr/local/bin:$PATH
         export PATH=$ORACLE_HOME/bin:$BASE_PATH
         export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib
         export CLASSPATH=$ORACLE_HOME/JRE:$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlib
         alias grid_env='. /home/oracle/grid_env'
         alias db_env='. /home/oracle/db_env'
      when: ansible_hostname == rac_server2

#    - name: add setEnv.sh to oracle users bash_profile
#      lineinfile:
#       path: /home/oracle/.bash_profile
#       line: '. /home/oracle/scripts/setEnv.sh'

    - name: create start_all.sh file in oracle users scripts
      template:
       src: templates/start_all.j2
       dest: /home/oracle/scripts/start_all.sh
       mode: 0744
    
    - name: create stop_all.sh file in oracle users scripts
      template:
       src: templates/stop_all.j2
       dest: /home/oracle/scripts/stop_all.sh
       mode: 0744
    
    - name: copy grid_env file
      template:
       src: templates/grid_env.j2
       dest: /home/oracle/grid_env
       mode: 0744

    - name: copy db_env file node1
      template:
       src: templates/db_env_node1.j2
       dest: /home/oracle/db_env
       mode: 0744
      when: ansible_hostname == rac_server1 

    - name: copy db_env file node2
      template:
       src: templates/db_env_node2.j2
       dest: /home/oracle/db_env
       mode: 0744
      when: ansible_hostname == rac_server2 

    - name: set owner on directory for oracle user
      file:
       path: /home/oracle/
       owner: oracle
       group: oinstall
       recurse: yes

    - name: Create a 2048-bit SSH key for user oracle
      user:
        name: oracle
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa

    # Set Oracle as Owner on /u01

    - name: Get stat on /u01  
      stat:
        path: /u01
      register: gridown

    - name: set owner on directory for oracle install
      file:
        path: /u01
        owner: oracle
        group: oinstall
        mode: 0755
        recurse: yes
      when: gridown.stat.pw_name == 'root'

    # Copy and Extract Oracle Grid and DB 

    - name: copy Oracle DB Install
      copy:
        src:  /root/install/software/linuxx64_12201_database.zip
        dest:  /root/install/software/linuxx64_12201_database.zip
        force: no

    - name: Check if Oracle DB Install is extracted
      stat:
        path: /home/oracle/database/runInstaller
      register: dbinst_result
  
    - name: extract oracle db installer
      unarchive:
       src: /root/install/software/linuxx64_12201_database.zip
       dest: /home/oracle/
       owner: oracle
       group: oinstall
      when: dbinst_result.stat.exists == False

    - name: copy Oracle Grid Install
      copy:
        src:  /root/install/software/linuxx64_12201_grid_home.zip
        dest:  /root/install/software/linuxx64_12201_grid_home.zip
        force: no
      when: ansible_hostname == rac_server1 

    - name: Check if Oracle Grid Install is extracted
      stat:
        path: /u01/app/12.2.0.1/grid/gridSetup.sh
      register: gridinst_result
      when: ansible_hostname == rac_server1

    - name: extract oracle grid installer
      unarchive:
       src: /root/install/software/linuxx64_12201_grid_home.zip
       dest: /u01/app/12.2.0.1/grid
       owner: oracle
       group: oinstall
       mode: 0755
      when: 
        - ansible_hostname == rac_server1 
        - gridinst_result.stat.exists == False

    - name: creates directory for ocr_configuration
      file:
       path: /u01/shared_config/ocr_configuration
       state: directory
       owner: oracle
       group: oinstall
       mode: 0755

    - name: create oracle grid response file
      template:
       src: templates/grid.rsp.j2
       dest: /home/oracle/grid.rsp

    - name: Set boot to graphical
      shell: systemctl set-default graphical.target

    - name: restart rac nodes
      reboot:
        reboot_timeout: 360

#    - name: create oracle response file
#      template:
#       src: templates/oradb12.j2
#       dest: /home/oracle/database/oradb12.rsp
    
#    - name: create temp folder
#      file:
#       path: /home/oracle/.ansible/tmp
#       state: directory
#       owner: oracle
#       group: oinstall
#       mode: 0700
           
#    - name: install oracle db software
#      shell: /home/oracle/database/runInstaller -ignoreSysPrereqs -ignorePrereq -waitforcompletion -silent -responseFile /home/oracle/database/oradb12.rsp
#      become: yes
#     become_user: oracle
    
#    - name: run oracle post install scripts 1/2
#      shell: /u01/app/oraInventory/orainstRoot.sh
    
#    - name: run oracle post install scripts 2/2
#      shell: /u01/app/oracle/product/12.2.0.1/db_1/root.sh
    
#    - name: create dbora.service
#      template:
#       src: templates/dbora.service.j2
#       dest: /lib/systemd/system/dbora.service
    
#    - name: systemd daemon-reload to pick up config changes
#      systemd:
#       daemon_reload: yes
    
#    - name: enable service dbora
#      systemd:
#       name: dbora.service
#       enabled: yes
    
#    - name: start oracle listner
#      shell: runuser -l 'oracle' -c "lsnrctl start"
#      run_once: true

#    - name: create new database
#      shell:  runuser -l 'oracle' -c "/home/oracle/scripts/ora_createdb.sh"
#      run_once: true

#    - name: enable oracle db at boot
#      lineinfile:
#       dest: /etc/oratab
#       regexp: '^(.*)space:/u01/app/oracle/product/12.2.0.1/db_1:N(.*)$'
#      line: 'space:/u01/app/oracle/product/12.2.0.1/db_1:Y'
#      backrefs: yes
    
#    - name: create tnsnames.ora
#      template:
#       src: templates/tnsnames.j2
#       dest: /u01/app/oracle/product/12.2.0.1/db_1/network/admin/tnsnames.ora

#    - name: create spacewalk user in oracle db
#      shell: runuser -l 'oracle' -c "sqlplus / AS SYSDBA @/home/oracle/ora_createuser.sql"
    
#    - name: install oracleclient-basic prerequisits
#      yum:
#       name: /root/install/software/oracle-instantclient11.2-basic-11.2.0.4.0-1.x86_64.rpm
#       state: present
    
#    - name: install oracleclient-sqlplus prerequisits
#      yum:
#       name: /root/install/software/oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm
#       state: present
    
#    - name: configure ldconfig
#      shell: |
#       echo /usr/lib/oracle/11.2/client64/lib > /etc/ld.so.conf.d/oracle-instantclient11.2.conf
#       ldconfig
